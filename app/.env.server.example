#Server Secrets
# NOTE: you can let Wasp set up your Postgres DB by running `wasp start db` in a separate terminal window. 
# then, in a new terminal window, run `wasp db migrate-dev` and finally `wasp start`.
# If you use `wasp start db` then you DO NOT need to add a DATABASE_URL env variable here.
#keep as comment until you are ready to deploy to a DB: DATABASE_URL=postgresql://user:password@localhost:5432/dbname #Primary database connection string

# For testing, create a new store in test mode on https://lemonsqueezy.com
LEMONSQUEEZY_API_KEY=your_api_key #Generate from LemonSqueezy Dashboard > Settings > API
# After creating a store, you can find your store id in the store settings https://app.lemonsqueezy.com/settings/stores
LEMONSQUEEZY_STORE_ID=your_store_id #Found in Store Settings > General
# define your own webhook secret when creating a new webhook on https://app.lemonsqueezy.com/settings/webhooks
LEMONSQUEEZY_WEBHOOK_SECRET=your_webhook_secret #Generated when creating a webhook endpoint
# If using Lemon Squeezy, go to https://app.lemonsqueezy.com/products and create new products and variants
PAYMENTS_BETA_PLAN_ID=your_beta_plan_id #Found under Products > Variants > ID
PAYMENTS_BASIC_PLAN_ID=your_basic_plan_id #Found under Products > Variants > ID
PAYMENTS_PREMIUM_PLAN_ID=your_premium_plan_id #Found under Products > Variants > ID
PAYMENTS_ENTERPRISE_PLAN_ID=your_enterprise_plan_id #Found under Products > Variants > ID

# set this as a comma-separated list of emails you want to give admin privileges to upon registeration
ADMIN_EMAILS=admin1@example.com,admin2@example.com #Comma-separated list of admin email addresses

# see our guide for setting up google auth: https://wasp-lang.dev/docs/auth/social-auth/google
GOOGLE_CLIENT_ID=your_google_client_id #Get from Google Cloud Console > APIs & Services > Credentials
GOOGLE_CLIENT_SECRET=your_google_client_secret #Get from Google Cloud Console > APIs & Services > Credentials
# see our guide for setting up github auth: https://wasp-lang.dev/docs/auth/social-auth/github
GITHUB_CLIENT_ID=your_github_client_id #Get from GitHub > Settings > Developer settings > OAuth Apps
GITHUB_CLIENT_SECRET=your_github_client_secret #Get from GitHub > Settings > Developer settings > OAuth Apps
# see our guide for setting up discord auth: https://wasp-lang.dev/docs/auth/social-auth/discord
DISCORD_CLIENT_ID=your_discord_client_id #Get from Discord Developer Portal > Applications > OAuth2
DISCORD_CLIENT_SECRET=your_discord_client_secret #Get from Discord Developer Portal > Applications > OAuth2

# (OPTIONAL) get your openai api key at https://platform.openai.com/account
OPENAI_API_KEY=your_openai_api_key #Get from OpenAI Dashboard > API Keys (https://platform.openai.com/api-keys)

# (OPTIONAL) get your plausible api key at https://plausible.io/login or https://your-plausible-instance.com/login
PLAUSIBLE_API_KEY=your_plausible_api_key #Get from Plausible > Settings > API Keys
# You will find your site id in the Plausible dashboard. It will look like 'opensaas.sh'
PLAUSIBLE_SITE_ID=your_site_domain #Your website domain as configured in Plausible
PLAUSIBLE_BASE_URL=https://plausible.io/api # if you are self-hosting plausible, change this to your plausible instance's base url

# (OPTIONAL) get your aws s3 credentials at https://console.aws.amazon.com and create a new IAM user with S3 access
AWS_S3_IAM_ACCESS_KEY=your_aws_access_key #Get from AWS IAM > Users > Security credentials
AWS_S3_IAM_SECRET_KEY=your_aws_secret_key #Get from AWS IAM > Users > Security credentials
AWS_S3_FILES_BUCKET=your_bucket_name #Create in AWS S3 Console
AWS_S3_REGION=your_bucket_region #AWS region where bucket is created (e.g., us-east-1)


JWT_SECRET=your_jwt_secret_here #terminal: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
SMTP_HOST=mail.example.com #Get from your email provider (e.g., Gmail, Amazon SES, Mailgun)
SMTP_USERNAME=your_email@example.com #Your email address
SMTP_PASSWORD=your_smtp_password #App-specific password from email provider
SMTP_PORT=465 #Standard secure SMTP port
EMAIL_FROM="Your App Name <noreply@example.com>" #Your app name and email
ALLOWED_ORIGINS=https://example.com,https://api.example.com #Comma-separated list of allowed origins
WASP_SERVER_URL=https://api.example.com #Your API server URL
WASP_WEB_CLIENT_URL=https://example.com #Your frontend URL
REDISHOST=your_redis_host #Get from Redis provider (e.g., Redis Labs, AWS ElastiCache)
REDISPORT=your_redis_port #Get from Redis provider
REDISPASSWORD=your_redis_password #Get from Redis provider
REDISUSETLS=true #Set to true for secure connections
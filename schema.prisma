datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)
  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     
  subscriptionStatus        String?         
  subscriptionPlan          String?         
  sendNewsletter            Boolean         @default(false)
  datePaid                  DateTime?
  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                       String          @id @default(uuid())
  phone                    String?
  subject                  String?
  department               String?
  urgency                  String?
  newsletterOptIn          Boolean?
  createdAt                DateTime        @default(now())
  email                    String    
  name                     String    
  user                     User?           @relation(fields: [userId], references: [id])
  userId                   String?   
  message                  String          @db.Text 
  isRead                   Boolean         @default(false)
  isArchived               Boolean         @default(false)
  isResolved               Boolean         @default(false)
  repliedAt                DateTime?
}